--- ../src-base/minecraft/net/minecraft/world/chunk/storage/RegionFile.java
+++ ../src-work/minecraft/net/minecraft/world/chunk/storage/RegionFile.java
@@ -8,367 +8,371 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.RandomAccessFile;
+import java.nio.MappedByteBuffer;
+import java.nio.channels.FileChannel.MapMode;
 import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
 import java.util.zip.DeflaterOutputStream;
 import java.util.zip.GZIPInputStream;
 import java.util.zip.InflaterInputStream;
+
+import com.google.common.collect.Lists;
+import cpw.mods.fml.common.FMLLog;
+import io.github.crucible.CrucibleConfigs;
 import net.minecraft.server.MinecraftServer;
 
 public class RegionFile
 {
-    private static final byte[] emptySector = new byte[4096];
-    private final File fileName;
-    private RandomAccessFile dataFile;
-    private final int[] offsets = new int[1024];
-    private final int[] chunkTimestamps = new int[1024];
-    private ArrayList sectorFree;
-    private int sizeDelta;
-    private long lastModified;
-    private static final String __OBFID = "CL_00000381";
+	// Minecraft is limited to 256 sections per chunk. So 1MB. This can easily be override.
+	// So we extend this to use the REAL size when the count is maxed by seeking to that section and reading the length.
+	private static final boolean FORGE_ENABLE_EXTENDED_SAVE = CrucibleConfigs.configs.crucible_enableOversizedChunk;
+	private static final byte[] EMPTY_SECTOR = new byte[4096];
+	private final File fileName;
+	private final int[] offsets = new int[1024];
+	private final int[] chunkTimestamps = new int[1024];
+	private List<Boolean> sectorFree;
+	private int sizeDelta;
+	private long lastModified;
+	private static final String __OBFID = "CL_00000381";
 
-    public RegionFile(File p_i2001_1_)
-    {
-        this.fileName = p_i2001_1_;
-        this.sizeDelta = 0;
+	private RandomAccessFile dataFile = null;
+	
+	public RegionFile(File fileNameIn)
+	{
+		this.fileName = fileNameIn;
+		this.sizeDelta = 0;
 
-        try
-        {
-            if (p_i2001_1_.exists())
-            {
-                this.lastModified = p_i2001_1_.lastModified();
-            }
+		try
+		{
+			if (fileNameIn.exists())
+			{
+				this.lastModified = fileNameIn.lastModified();
+			}
 
-            this.dataFile = new RandomAccessFile(p_i2001_1_, "rw");
-            int i;
+			RandomAccessFile dataFile = new RandomAccessFile(fileNameIn, "rw");
 
-            if (this.dataFile.length() < 4096L)
-            {
-                for (i = 0; i < 1024; ++i)
-                {
-                    this.dataFile.writeInt(0);
-                }
+			this.dataFile = dataFile;
+			int i;
+			if (this.dataFile.length() < 4096L)
+			{
+				// Spigot - more efficient chunk zero'ing
+				this.dataFile.write(RegionFile.EMPTY_SECTOR); // Spigot
+				this.dataFile.write(RegionFile.EMPTY_SECTOR); // Spigot
 
-                for (i = 0; i < 1024; ++i)
-                {
-                    this.dataFile.writeInt(0);
-                }
+				this.sizeDelta += 8192;
+			}
 
-                this.sizeDelta += 8192;
-            }
+			if ((this.dataFile.length() & 4095L) != 0L)
+			{
+				for (i = 0; (long)i < (this.dataFile.length() & 4095L); ++i)
+				{
+					this.dataFile.write(0);
+				}
+			}
 
-            if ((this.dataFile.length() & 4095L) != 0L)
-            {
-                for (i = 0; (long)i < (this.dataFile.length() & 4095L); ++i)
-                {
-                    this.dataFile.write(0);
-                }
-            }
+			i = (int)this.dataFile.length() / 4096;
+			this.sectorFree = Lists.<Boolean>newArrayListWithCapacity(i);
+			int j;
 
-            i = (int)this.dataFile.length() / 4096;
-            this.sectorFree = new ArrayList(i);
-            int j;
+			for (j = 0; j < i; ++j)
+			{
+				this.sectorFree.add(Boolean.valueOf(true));
+			}
 
-            for (j = 0; j < i; ++j)
-            {
-                this.sectorFree.add(Boolean.valueOf(true));
-            }
+			this.sectorFree.set(0, Boolean.valueOf(false));
+			this.sectorFree.set(1, Boolean.valueOf(false));
+			this.dataFile.seek(0L);
 
-            this.sectorFree.set(0, Boolean.valueOf(false));
-            this.sectorFree.set(1, Boolean.valueOf(false));
-            this.dataFile.seek(0L);
-            int k;
+			for (j = 0; j < 1024; ++j) {
 
-            for (j = 0; j < 1024; ++j)
-            {
-                k = this.dataFile.readInt();
-                this.offsets[j] = k;
+				int k = this.dataFile.readInt();
+				this.offsets[j] = k;
+				// Spigot start
+				int length = k & 255;
+				if (length == 255) {
 
-                if (k != 0 && (k >> 8) + (k & 255) <= this.sectorFree.size())
-                {
-                    for (int l = 0; l < (k & 255); ++l)
-                    {
-                        this.sectorFree.set((k >> 8) + l, Boolean.valueOf(false));
-                    }
-                }
-            }
+					// We're maxed out, so we need to read the proper length from the section
+					if ((k >> 8) <= this.sectorFree.size()) {
+						this.dataFile.seek((k >> 8) * 4096);
+						length = (this.dataFile.readInt() + 4) / 4096 + 1;
+						this.dataFile.seek(j * 4 + 4); //Go back to where we were
+					}
+				}
+				if (k != 0 && (k >> 8) + length <= this.sectorFree.size()) {
+					for (int l = 0; l < length; ++l) {
+						// Spigot end
+						this.sectorFree.set((k >> 8) + l, Boolean.valueOf(false));
+					}
+				} else if (length > 0)
+					FMLLog.warning("Invalid chunk: (%s, %s) Offset: %s Length: %s runs off end file. %s", j % 32, (int) (j / 32), k >> 8, length, fileNameIn);
+			}
+			int k;
+			for (j = 0; j < 1024; ++j)
+			{
+				k = this.dataFile.readInt();
+				this.chunkTimestamps[j] = k;
+			}
 
-            for (j = 0; j < 1024; ++j)
-            {
-                k = this.dataFile.readInt();
-                this.chunkTimestamps[j] = k;
-            }
-        }
-        catch (IOException ioexception)
-        {
-            ioexception.printStackTrace();
-        }
-    }
 
-    // This is a copy (sort of) of the method below it, make sure they stay in sync
-    public synchronized boolean chunkExists(int x, int z)
-    {
-        if (this.outOfBounds(x, z)) return false;
+		}
+		catch (IOException ioexception)
+		{
+			ioexception.printStackTrace();
+		}
+	}
 
-        try
-        {
-            int offset = this.getOffset(x, z);
+	// This is a copy (sort of) of the method below it, make sure they stay in sync
+	public synchronized boolean chunkExists(int x, int z)
+	{
+		return isChunkSaved(x, z);
+	}
 
-            if (offset == 0) return false;
+	public synchronized DataInputStream getChunkDataInputStream(int x, int z)
+	{
+		if (this.outOfBounds(x, z))
+		{
+			return null;
+		}
+		else
+		{
+			try
+			{
+				int k = this.getOffset(x, z);
 
-            int sectorNumber = offset >> 8;
-            int numSectors = offset & 255;
+				if (k == 0)
+				{
+					return null;
+				}
+				else
+				{
+					int l = k >> 8;
+					int i1 = k & 255;
+					// Spigot start
+					if (i1 == 255)
+					{
+						this.dataFile.seek(l * 4096);
+						i1 = (this.dataFile.readInt() + 4) / 4096 + 1;
+					}
+					// Spigot end
+					if (l + i1 > this.sectorFree.size()) {
+						return null;
+					}
+					else
+					{
+						this.dataFile.seek((long)(l * 4096));
+						int j1 = this.dataFile.readInt();
 
-            if (sectorNumber + numSectors > this.sectorFree.size()) return false;
+						if (j1 > 4096 * i1)
+						{
+							return null;
+						}
+						else if (j1 <= 0)
+						{
+							return null;
+						}
+						else
+						{
+							byte b0 = this.dataFile.readByte();
+							byte[] abyte;
 
-            this.dataFile.seek((long)(sectorNumber * 4096));
-            int length = this.dataFile.readInt();
+							if (b0 == 1)
+							{
+								abyte = new byte[j1 - 1];
+								this.dataFile.read(abyte);
+								return new DataInputStream(new BufferedInputStream(new GZIPInputStream(new ByteArrayInputStream(abyte))));
+							}
+							else if (b0 == 2)
+							{
+								abyte = new byte[j1 - 1];
+								this.dataFile.read(abyte);
+								return new DataInputStream(new BufferedInputStream(new InflaterInputStream(new ByteArrayInputStream(abyte))));
+							}
+							else
+							{
+								return null;
+							}
+						}
+					}
+				}
+			}
+			catch (IOException ioexception)
+			{
+				return null;
+			}
+		}
+	}
 
-            if (length > 4096 * numSectors || length <= 0) return false;
+	public DataOutputStream getChunkDataOutputStream(int x, int z)
+	{
+		return this.outOfBounds(x, z) ? null : new DataOutputStream(new java.io.BufferedOutputStream(new DeflaterOutputStream(new RegionFile.ChunkBuffer(x, z)))); // Spigot - use a BufferedOutputStream to greatly improve file write performance
+	}
 
-            byte version = this.dataFile.readByte();
+	protected synchronized void write(int x, int z, byte[] data, int length)
+	{
+		try
+		{
+			int l = this.getOffset(x, z);
+			int i1 = l >> 8;
+			int j1 = l & 255;
+			// Spigot start
+			if (j1 == 255)
+			{
+				this.dataFile.seek(i1 * 4096);
+				j1 = (this.dataFile.readInt() + 4) / 4096 + 1;
+			}
+			// Spigot end
+			int k1 = (length + 5) / 4096 + 1;
 
-            if (version == 1 || version == 2) return true;
-        }
-        catch (IOException ioexception)
-        {
-            return false;
-        }
+			if (k1 >= 256)
+			{
+				cpw.mods.fml.common.FMLLog.info("[Crucible] Oversized Chunk at (%s, %s)", x, z);
+				if (!FORGE_ENABLE_EXTENDED_SAVE) return;
+			}
 
-        return false;
-    }
+			if (i1 != 0 && j1 == k1)
+			{
+				this.write(i1, data, length);
+			}
+			else
+			{
+				int l1;
 
-    public synchronized DataInputStream getChunkDataInputStream(int p_76704_1_, int p_76704_2_)
-    {
-        if (this.outOfBounds(p_76704_1_, p_76704_2_))
-        {
-            return null;
-        }
-        else
-        {
-            try
-            {
-                int k = this.getOffset(p_76704_1_, p_76704_2_);
+				for (l1 = 0; l1 < j1; ++l1)
+				{
+					this.sectorFree.set(i1 + l1, Boolean.valueOf(true));
+				}
 
-                if (k == 0)
-                {
-                    return null;
-                }
-                else
-                {
-                    int l = k >> 8;
-                    int i1 = k & 255;
+				l1 = this.sectorFree.indexOf(Boolean.valueOf(true));
+				int i2 = 0;
+				int j2;
 
-                    if (l + i1 > this.sectorFree.size())
-                    {
-                        return null;
-                    }
-                    else
-                    {
-                        this.dataFile.seek((long)(l * 4096));
-                        int j1 = this.dataFile.readInt();
+				if (l1 != -1)
+				{
+					for (j2 = l1; j2 < this.sectorFree.size(); ++j2)
+					{
+						if (i2 != 0)
+						{
+							if (((Boolean)this.sectorFree.get(j2)).booleanValue())
+							{
+								++i2;
+							}
+							else
+							{
+								i2 = 0;
+							}
+						}
+						else if (((Boolean)this.sectorFree.get(j2)).booleanValue())
+						{
+							l1 = j2;
+							i2 = 1;
+						}
 
-                        if (j1 > 4096 * i1)
-                        {
-                            return null;
-                        }
-                        else if (j1 <= 0)
-                        {
-                            return null;
-                        }
-                        else
-                        {
-                            byte b0 = this.dataFile.readByte();
-                            byte[] abyte;
+						if (i2 >= k1)
+						{
+							break;
+						}
+					}
+				}
 
-                            if (b0 == 1)
-                            {
-                                abyte = new byte[j1 - 1];
-                                this.dataFile.read(abyte);
-                                return new DataInputStream(new BufferedInputStream(new GZIPInputStream(new ByteArrayInputStream(abyte))));
-                            }
-                            else if (b0 == 2)
-                            {
-                                abyte = new byte[j1 - 1];
-                                this.dataFile.read(abyte);
-                                return new DataInputStream(new BufferedInputStream(new InflaterInputStream(new ByteArrayInputStream(abyte))));
-                            }
-                            else
-                            {
-                                return null;
-                            }
-                        }
-                    }
-                }
-            }
-            catch (IOException ioexception)
-            {
-                return null;
-            }
-        }
-    }
+				if (i2 >= k1)
+				{
+					i1 = l1;
+					this.setOffset(x, z, l1 << 8 | (k1 > 255 ? 255 : k1)); // Spigot
 
-    public DataOutputStream getChunkDataOutputStream(int p_76710_1_, int p_76710_2_)
-    {
-        return this.outOfBounds(p_76710_1_, p_76710_2_) ? null : new DataOutputStream(new DeflaterOutputStream(new RegionFile.ChunkBuffer(p_76710_1_, p_76710_2_)));
-    }
+					for (j2 = 0; j2 < k1; ++j2)
+					{
+						this.sectorFree.set(i1 + j2, Boolean.valueOf(false));
+					}
 
-    protected synchronized void write(int p_76706_1_, int p_76706_2_, byte[] p_76706_3_, int p_76706_4_)
-    {
-        try
-        {
-            int l = this.getOffset(p_76706_1_, p_76706_2_);
-            int i1 = l >> 8;
-            int j1 = l & 255;
-            int k1 = (p_76706_4_ + 5) / 4096 + 1;
+					this.write(i1, data, length);
+				}
+				else
+				{
+					this.dataFile.seek(this.dataFile.length());
+					i1 = this.sectorFree.size();
 
-            if (k1 >= 256)
-            {
-                return;
-            }
+					for (j2 = 0; j2 < k1; ++j2)
+					{
+						this.dataFile.write(EMPTY_SECTOR);
+						this.sectorFree.add(Boolean.valueOf(false));
+					}
 
-            if (i1 != 0 && j1 == k1)
-            {
-                this.write(i1, p_76706_3_, p_76706_4_);
-            }
-            else
-            {
-                int l1;
+			this.setChunkTimestamp(x, z, (int)(MinecraftServer.getSystemTimeMillis() / 1000L));
+		}
+		catch (IOException ioexception)
+		{
+			ioexception.printStackTrace();
+		}
+	}
 
-                l1 = this.sectorFree.indexOf(Boolean.valueOf(true));
-                int i2 = 0;
-                int j2;
+	private void write(int sectorNumber, byte[] data, int length) throws IOException
+	{
+		this.dataFile.seek((long)(sectorNumber * 4096));
+		this.dataFile.writeInt(length + 1);
+		this.dataFile.writeByte(2);
+		this.dataFile.write(data, 0, length);
+	}
 
-                if (l1 != -1)
-                {
-                    for (j2 = l1; j2 < this.sectorFree.size(); ++j2)
-                    {
-                        if (i2 != 0)
-                        {
-                            if (((Boolean)this.sectorFree.get(j2)).booleanValue())
-                            {
-                                ++i2;
-                            }
-                            else
-                            {
-                                i2 = 0;
-                            }
-                        }
-                        else if (((Boolean)this.sectorFree.get(j2)).booleanValue())
-                        {
-                            l1 = j2;
-                            i2 = 1;
-                        }
+	public boolean outOfBounds(int x, int z)
+	{
+		return x < 0 || x >= 32 || z < 0 || z >= 32;
+	}
 
-                        if (i2 >= k1)
-                        {
-                            break;
-                        }
-                    }
-                }
+	public int getOffset(int x, int z)
+	{
+		return this.offsets[x + z * 32];
+	}
 
-                if (i2 >= k1)
-                {
-                    i1 = l1;
-                    this.setOffset(p_76706_1_, p_76706_2_, l1 << 8 | k1);
+	public boolean isChunkSaved(int x, int z)
+	{
+		return this.getOffset(x, z) != 0;
+	}
 
-                    for (j2 = 0; j2 < k1; ++j2)
-                    {
-                        this.sectorFree.set(i1 + j2, Boolean.valueOf(false));
-                    }
+	private void setOffset(int x, int z, int offset) throws IOException
+	{
+		this.offsets[x + z * 32] = offset;
+		this.dataFile.seek((long)((x + z * 32) * 4));
+		this.dataFile.writeInt(offset);
+	}
 
-                    this.write(i1, p_76706_3_, p_76706_4_);
-                }
-                else
-                {
-                    this.dataFile.seek(this.dataFile.length());
-                    i1 = this.sectorFree.size();
+	private void setChunkTimestamp(int x, int z, int timestamp) throws IOException
+	{
+		this.chunkTimestamps[x + z * 32] = timestamp;
+		this.dataFile.seek((long)(4096 + (x + z * 32) * 4));
+		this.dataFile.writeInt(timestamp);
+	}
 
-                    for (j2 = 0; j2 < k1; ++j2)
-                    {
-                        this.dataFile.write(emptySector);
-                        this.sectorFree.add(Boolean.valueOf(false));
-                    }
+	public void close() throws IOException
+	{
+		if (this.dataFile != null)
+		{
+			this.dataFile.close();
+		}
+	}
 
-                    this.sizeDelta += 4096 * k1;
-                    this.write(i1, p_76706_3_, p_76706_4_);
-                    this.setOffset(p_76706_1_, p_76706_2_, i1 << 8 | k1);
-                }
-            }
+	class ChunkBuffer extends ByteArrayOutputStream
+	{
+		private int chunkX;
+		private int chunkZ;
+		private static final String __OBFID = "CL_00000382";
 
-            this.setChunkTimestamp(p_76706_1_, p_76706_2_, (int)(MinecraftServer.getSystemTimeMillis() / 1000L));
-        }
-        catch (IOException ioexception)
-        {
-            ioexception.printStackTrace();
-        }
-    }
+		public ChunkBuffer(int x, int z)
+		{
+			super(8096);
+			this.chunkX = x;
+			this.chunkZ = z;
+		}
 
-    private void write(int p_76712_1_, byte[] p_76712_2_, int p_76712_3_) throws IOException
-    {
-        this.dataFile.seek((long)(p_76712_1_ * 4096));
-        this.dataFile.writeInt(p_76712_3_ + 1);
-        this.dataFile.writeByte(2);
-        this.dataFile.write(p_76712_2_, 0, p_76712_3_);
-    }
-
-    private boolean outOfBounds(int p_76705_1_, int p_76705_2_)
-    {
-        return p_76705_1_ < 0 || p_76705_1_ >= 32 || p_76705_2_ < 0 || p_76705_2_ >= 32;
-    }
-
-    private int getOffset(int p_76707_1_, int p_76707_2_)
-    {
-        return this.offsets[p_76707_1_ + p_76707_2_ * 32];
-    }
-
-    public boolean isChunkSaved(int p_76709_1_, int p_76709_2_)
-    {
-        return this.getOffset(p_76709_1_, p_76709_2_) != 0;
-    }
-
-    private void setOffset(int p_76711_1_, int p_76711_2_, int p_76711_3_) throws IOException
-    {
-        this.offsets[p_76711_1_ + p_76711_2_ * 32] = p_76711_3_;
-        this.dataFile.seek((long)((p_76711_1_ + p_76711_2_ * 32) * 4));
-        this.dataFile.writeInt(p_76711_3_);
-    }
-
-    private void setChunkTimestamp(int p_76713_1_, int p_76713_2_, int p_76713_3_) throws IOException
-    {
-        this.chunkTimestamps[p_76713_1_ + p_76713_2_ * 32] = p_76713_3_;
-        this.dataFile.seek((long)(4096 + (p_76713_1_ + p_76713_2_ * 32) * 4));
-        this.dataFile.writeInt(p_76713_3_);
-    }
-
-    public void close() throws IOException
-    {
-        if (this.dataFile != null)
-        {
-            this.dataFile.close();
-        }
-    }
-
-    class ChunkBuffer extends ByteArrayOutputStream
-    {
-        private int chunkX;
-        private int chunkZ;
-        private static final String __OBFID = "CL_00000382";
-
-        public ChunkBuffer(int p_i2000_2_, int p_i2000_3_)
-        {
-            super(8096);
-            this.chunkX = p_i2000_2_;
-            this.chunkZ = p_i2000_3_;
-        }
-
-        public void close() throws IOException
-        {
-            RegionFile.this.write(this.chunkX, this.chunkZ, this.buf, this.count);
-        }
-    }
+		public void close() throws IOException
+		{
+			RegionFile.this.write(this.chunkX, this.chunkZ, this.buf, this.count);
+		}
+	}
 }
